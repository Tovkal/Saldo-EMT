setup_travis

fastlane_version "2.62.0"

default_platform :ios

desc "Run all the tests"
lane :test do
  carthage(command: "bootstrap", platform: "iOS", cache_builds: true)
  if !is_ci
    sh("defaults write com.apple.iphonesimulator ConnectHardwareKeyboard -bool no")
  end
  scan(
    scheme: "SaldoEMT",
    devices: ["iPhone 8"],
    output_types: "html",
    skip_build: true
  )
  if !is_ci
    sh("defaults write com.apple.iphonesimulator ConnectHardwareKeyboard -bool yes")
  end
end

desc "Build and send the beta to TestFlight"
lane :beta do
  ensure_git_status_clean

  notes = changelog

  version = version_bump
  build_number = get_build_number

  build(version: version)

  pilot(wait_for_uploaded_build: true, changelog: notes)

  refresh_dsyms(version: version, build_number: build_number)

  push_to_git_remote
end

desc "Build and upload to iTunes Connect"
lane :upload_build do
  ensure_git_status_clean

  version = version_bump

  build(version: version)

  deliver(skip_binary_upload: false, app_version: version, force: true)

  push_to_git_remote
end

desc "Build and test"
lane :build do |options|
  metadata(app_version: options[:version])

  match(type: "appstore")

  carthage(command: "bootstrap", platform: "iOS", cache_builds: true)

  # build your iOS app
  gym(
    scheme: "SaldoEMT"
  )

  test
end

desc "Upload dsyms to Fabric"
lane :refresh_dsyms do |options|
  download_dsyms(version: options[:version], build_number: options[:build_number])
  upload_symbols_to_crashlytics
  clean_build_artifacts
end

desc "Upload metadata"
lane :metadata do |options|
  deliver(app_version: options[:app_version])
end

desc "Take all screenshots"
lane :screenshots do
  snapshot
end

desc "Increment and commit version bump"
lane :version_bump do
  version = increment_version_number
  increment_build_number

  commit_version_bump(
    message: "Version bump to #{version}",
    xcodeproj: "SaldoEMT.xcodeproj"
  )
  add_git_tag(
    tag: version
  )

  version
end

desc "Generate changelog"
lane :changelog do
  changelog = changelog_from_git_commits(pretty: "- %s", merge_commit_filtering: "exclude_merges")
  changelogAnyGood = prompt(text: "Does the changelog look good?", boolean: true)
  if !changelogAnyGood
    changelog = prompt(text: "Enter the desired changelog: ", multi_line_end_keyword: "END")
  end
end
